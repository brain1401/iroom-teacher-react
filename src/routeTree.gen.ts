/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as MainRouteRouteImport } from './routes/main/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as MainIndexRouteImport } from './routes/main/index'
import { Route as MainTestPaperRouteRouteImport } from './routes/main/test-paper/route'
import { Route as MainTestPaperIndexRouteImport } from './routes/main/test-paper/index'
import { Route as MainTestManagementIndexRouteImport } from './routes/main/test-management/index'
import { Route as MainStatisticsIndexRouteImport } from './routes/main/statistics/index'
import { Route as MainTestPaperExamIdIndexRouteImport } from './routes/main/test-paper/$examId/index'

const MainRouteRoute = MainRouteRouteImport.update({
  id: '/main',
  path: '/main',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const MainIndexRoute = MainIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainTestPaperRouteRoute = MainTestPaperRouteRouteImport.update({
  id: '/test-paper',
  path: '/test-paper',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainTestPaperIndexRoute = MainTestPaperIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainTestPaperRouteRoute,
} as any)
const MainTestManagementIndexRoute = MainTestManagementIndexRouteImport.update({
  id: '/test-management/',
  path: '/test-management/',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainStatisticsIndexRoute = MainStatisticsIndexRouteImport.update({
  id: '/statistics/',
  path: '/statistics/',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainTestPaperExamIdIndexRoute =
  MainTestPaperExamIdIndexRouteImport.update({
    id: '/$examId/',
    path: '/$examId/',
    getParentRoute: () => MainTestPaperRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/main': typeof MainRouteRouteWithChildren
  '/main/test-paper': typeof MainTestPaperRouteRouteWithChildren
  '/main/': typeof MainIndexRoute
  '/main/statistics': typeof MainStatisticsIndexRoute
  '/main/test-management': typeof MainTestManagementIndexRoute
  '/main/test-paper/': typeof MainTestPaperIndexRoute
  '/main/test-paper/$examId': typeof MainTestPaperExamIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/main': typeof MainIndexRoute
  '/main/statistics': typeof MainStatisticsIndexRoute
  '/main/test-management': typeof MainTestManagementIndexRoute
  '/main/test-paper': typeof MainTestPaperIndexRoute
  '/main/test-paper/$examId': typeof MainTestPaperExamIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/main': typeof MainRouteRouteWithChildren
  '/main/test-paper': typeof MainTestPaperRouteRouteWithChildren
  '/main/': typeof MainIndexRoute
  '/main/statistics/': typeof MainStatisticsIndexRoute
  '/main/test-management/': typeof MainTestManagementIndexRoute
  '/main/test-paper/': typeof MainTestPaperIndexRoute
  '/main/test-paper/$examId/': typeof MainTestPaperExamIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/main'
    | '/main/test-paper'
    | '/main/'
    | '/main/statistics'
    | '/main/test-management'
    | '/main/test-paper/'
    | '/main/test-paper/$examId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/main'
    | '/main/statistics'
    | '/main/test-management'
    | '/main/test-paper'
    | '/main/test-paper/$examId'
  id:
    | '__root__'
    | '/'
    | '/main'
    | '/main/test-paper'
    | '/main/'
    | '/main/statistics/'
    | '/main/test-management/'
    | '/main/test-paper/'
    | '/main/test-paper/$examId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MainRouteRoute: typeof MainRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/main': {
      id: '/main'
      path: '/main'
      fullPath: '/main'
      preLoaderRoute: typeof MainRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/main/': {
      id: '/main/'
      path: '/'
      fullPath: '/main/'
      preLoaderRoute: typeof MainIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/main/test-paper': {
      id: '/main/test-paper'
      path: '/test-paper'
      fullPath: '/main/test-paper'
      preLoaderRoute: typeof MainTestPaperRouteRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/main/test-paper/': {
      id: '/main/test-paper/'
      path: '/'
      fullPath: '/main/test-paper/'
      preLoaderRoute: typeof MainTestPaperIndexRouteImport
      parentRoute: typeof MainTestPaperRouteRoute
    }
    '/main/test-management/': {
      id: '/main/test-management/'
      path: '/test-management'
      fullPath: '/main/test-management'
      preLoaderRoute: typeof MainTestManagementIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/main/statistics/': {
      id: '/main/statistics/'
      path: '/statistics'
      fullPath: '/main/statistics'
      preLoaderRoute: typeof MainStatisticsIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/main/test-paper/$examId/': {
      id: '/main/test-paper/$examId/'
      path: '/$examId'
      fullPath: '/main/test-paper/$examId'
      preLoaderRoute: typeof MainTestPaperExamIdIndexRouteImport
      parentRoute: typeof MainTestPaperRouteRoute
    }
  }
}

interface MainTestPaperRouteRouteChildren {
  MainTestPaperIndexRoute: typeof MainTestPaperIndexRoute
  MainTestPaperExamIdIndexRoute: typeof MainTestPaperExamIdIndexRoute
}

const MainTestPaperRouteRouteChildren: MainTestPaperRouteRouteChildren = {
  MainTestPaperIndexRoute: MainTestPaperIndexRoute,
  MainTestPaperExamIdIndexRoute: MainTestPaperExamIdIndexRoute,
}

const MainTestPaperRouteRouteWithChildren =
  MainTestPaperRouteRoute._addFileChildren(MainTestPaperRouteRouteChildren)

interface MainRouteRouteChildren {
  MainTestPaperRouteRoute: typeof MainTestPaperRouteRouteWithChildren
  MainIndexRoute: typeof MainIndexRoute
  MainStatisticsIndexRoute: typeof MainStatisticsIndexRoute
  MainTestManagementIndexRoute: typeof MainTestManagementIndexRoute
}

const MainRouteRouteChildren: MainRouteRouteChildren = {
  MainTestPaperRouteRoute: MainTestPaperRouteRouteWithChildren,
  MainIndexRoute: MainIndexRoute,
  MainStatisticsIndexRoute: MainStatisticsIndexRoute,
  MainTestManagementIndexRoute: MainTestManagementIndexRoute,
}

const MainRouteRouteWithChildren = MainRouteRoute._addFileChildren(
  MainRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MainRouteRoute: MainRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
